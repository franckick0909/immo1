// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String     @id @default(auto()) @map("_id") @db.ObjectId
  name                String?
  email               String     @unique
  password            String
  image               String?
  role                Role       @default(USER)
  status              Status     @default(ACTIVE)
  emailVerified       Boolean    @default(false)
  verificationToken   String?
  verificationExpires DateTime?
  pendingEmail        String?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  Account             Account[]
  Session             Session[]
  adminLogs           AdminLog[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AdminLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  action    String // CREATE, UPDATE, DELETE, LOGIN, etc.
  entity    String // USER, PROPERTY, etc.
  entityId  String?  @db.ObjectId
  details   Json? // Stocke les d√©tails de l'action (changements, etc.)
  adminId   String   @db.ObjectId
  admin     User     @relation(fields: [adminId], references: [id])
  createdAt DateTime @default(now())

  @@index([action])
  @@index([entity])
  @@index([adminId])
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
}
